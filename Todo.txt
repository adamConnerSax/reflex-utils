Small
1. Re-unite state types and do all changes (selection and map) through one state type?
2. Figure out more graceful way of handling the "Nothing" case so that the dropdown doesn't have the blank representing nothing
3. Put add/delete buttons on ListBasedEditable
4. Add a "change key" option?  It would have to remove the old and add it as a new one with a new key?
5. Initial states??

Medium
1. Make other containers work in this framework.
   a. All need to be made into maps?
   b. Flexibility in displayed keys?


Large/Hard
1. All instances Maybe (Dynamic t a) -> SimpleFormR t m a [Dynamics in, Dynamics out]


Questions:

1.  Any way to make it Dynamics in, Events out?  Without Events being applicative, I don't see how:

combineEv::(a->b->c)->Event a->Event b->Event c
combineEv f aEv bEv = ?

2. Combining dynamics with DMap functions is more efficient than Applicatives.  How to use this?  We could just redo the Generics piece of databuilder specifically for dynamics.  Any way to generalize databuilder for a different combining function?  (something with sig (a->b->c)->Dynamic a->Dynamic b->Dynamic c or using DMaps?)

Notes:

1. Splitting dynamics via the functor instance is the most efficent.  So no need to optimize that way.




